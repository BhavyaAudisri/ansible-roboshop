- name: create ec2 and r53 records
  connection: local
  hosts: localhost   # use localhost instead of local
  vars:
    subnet_id: subnet-0155cd65520695d4d
    sg_id: sg-06382d8940e141231
    ami_id: ami-09c813fb71547fc4f
    instance_type: t3.micro
    zone: somisettibhavya.life
    instances:
      - mysql
      - mongodb
      - redis
      - rabbitmq
      - user
      - cart
      - catalogue
      - shipping
      - payment
      - dispatch
      - frontend

  tasks:
    - name: Install AWS Python libraries
      ansible.builtin.pip:
        name: "{{ item }}"
        executable: pip3.9
      loop:
        - boto3
        - botocore

    - name: create ec2 instances
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        subnet_id: "{{ subnet_id }}"
        security_group: "{{ sg_id }}"
        image_id: "{{ ami_id }}"
        instance_type: "{{ 't3.large' if item in ['mongodb', 'catalogue'] else instance_type }}"
      loop: "{{ instances }}"
      register: ec2_info
      loop_control:
        label: "{{ item }}" 

    - name: print private IP addresses
      ansible.builtin.debug:
        msg: "{{ item.item }} â†’ {{ item.instances[0].private_ip_address }}"
      loop: "{{ ec2_info.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: remove frontend private ip record if exists
      amazon.aws.route53:
        state: absent
        zone: "{{ zone }}"
        record: "frontend.{{ zone }}"
        type: A
      ignore_errors: yes
      
    - name: create private ip r53 records
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ item.item }}.{{ zone }}"
        type: A
        ttl: 1
        value: "{{ item.instances[0].private_ip_address }}"
        wait: true
        overwrite: true
      loop: "{{ ec2_info.results }}"
      when: item.item | trim != "frontend"
      loop_control:
        label: "{{ item.item }}"

    - name: create public ip for frontend
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ zone }}"
        type: A
        ttl: 1
        value: "{{ item.instances[0].public_ip_address }}"
        wait: true
        overwrite: true
      loop: "{{ ec2_info.results }}"
      when: item.item == "frontend"
      loop_control:
        label: "{{ item.item }}"